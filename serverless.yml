service: notes-api
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 128
  timeout: 3

functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient

  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      # Keep the http connection open for few time to get it reused
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt:
            - notesTable
            - Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    events:
      - http:
          method: get
          path: notes
          # Using Cognito User Pool Authorizer
          authorizer:
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn
            # instesd of referencing we can use the SSM as well
            # for that we need to create the SSM in the resource section first and store it.
            #arn: ${ssm:/notes/${self:provider.stage}/userPoolArn}

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: !GetAtt notesTable.Arn

plugins:
  - serverless-iam-roles-per-function

resources:
  Resources: 
    ${file(resources.yml)}
